lession-4 语法

Left-Hand-Side::
// foo() = 1 语法合法但是不代表会存在，等号左边要返回reference
    MemberExpression
    NewExpression
    CallExpression
	MemberExpression::
		PrimaryExpression // 原子

		MemberExpression [ Expression ] // a['b']
		MemberExpression . IdentifierName // a.b
		// 返回的是Reference类型，只有delete和assign会体现引用特性，member运算是Reference
		// let o = {x:1}
		// o.x + 2
		// 1 + 2 结果相同

		// delete o.x
		// delete 1 结果不同
		// 加法就可以把Reference解成值

		MemberExpression TemplateLiteral // foo`string`
		SuperProperty:: // super.xxx || super['xxx;]
			super [ Expression ]
			super . IdentifierName
		MetaProperty:: // new.target
			NewTarget::
				new . target // 判断是否是被new调起的
		new MemberExpression Arguments // new Foo()

	NewExpression::
		MemberExpression
		new NewExpression // 意味着new Cls()的优先级大于new Cls

	CallExpression::
		// (new foo())['b'] 属于MemberExpression
		// new (foo['b'])

		CoverCallExpressionAndAsyncArrowHead:: // foo()
			MemberExpression Arguments
		SuperCall::
			super Arguments // super()
		CallExpression Arguments // foo()()
		CallExpression [ Expression ] // foo()['b']
		CallExpression . IdentifierName // foo().b
		CallExpression TemplateLiteral // foo()`string`

	Arguments[Yield, Await] :
		()
		( ArgumentList[?Yield, ?Await] )
		( ArgumentList[?Yield, ?Await] , )

UpdateExpression::
	LeftHandSideExpression
	LeftHandSideExpression [no LineTerminator here] ++
	LeftHandSideExpression [no lineTerminator here] --
	++ UnaryExpression
	-- UnaryExpression

UnaryExpression::
	UpdateExpression
	delete UnaryExpression // delete a.b
	void UnaryExpression // void foo() 将返回值变为undefined
	typeof UnaryExpression // typeof a
		// typeof null 'object'
		// typeof function(){} 'function'
	+ UnaryExpression // +a
	- UnaryExpression // -a
	~ UnaryExpression // ~a
	! UnaryExpression // !a 唯一的布尔型转换
	AwaitExpressioin // await a

ExponentiationExpression::
	UnaryExpression
	UpdateExpression ** ExponentialtionExpression
	//右结合

MultiplicativeExpression::
	ExponentiationExpression
	MultiplicativeExpression MultiplicativeOperator ExponentiationExpression
			MultiplicativeOperator:: one of
				* / %
AdditiveExpression::
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression

ShiftExpression::
	ShiftExpression << AdditiveExpression
	ShiftExpression >> AdditiveExpression
	ShiftExpression >>> AdditiveExpression

RelationalExpression::
	ShiftExpression
	RelationalExpression < ShiftExpression
	RelationalExpression > ShiftExpression
	RelationalExpression <= ShiftExpression
	RelationalExpression >= ShiftExpression
	RelationalExpression instanceof ShiftExpression
	RelationalExpression in ShiftExpression

EqualityExpression::
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression
	EqualityExpression === RelationalExpression
	EqualityExpression !== RelationalExpression

LogicalANDExpression::
	BitwiseORExpression
	LogicalANDExpression && BitwiseORExpression

LogicalORExpression::
	LogicalANDExpression
	LogicalORExpression || LogicalANDExpression

ConditionalExpression::
	LogicalORExpression
	LogicalORExpression ? AssignmentExpression : AssignmentExpression
	// 短路逻辑

AssignmentExpression::
	ConditionalExpression
	YieldExpression
	ArrowFunction
	AsyncArrowFunction
	LeftHandSideExpression = AssignmentExpression
	LeftHandSideExpression AssignmentOperator AssignmentExpression
		AssignmentOperator:: one of
			* = /= %= += -= <<= >>= >>>= &= ^= |= **=

Expression::
	AssignmentExpression
	Expression , AssignmentExpression


String Number Boolean Symbol 四种类型转Object会装箱
Symbol不可以new，可以通过两次装箱实现。
Object.getPrototypeOf(Object(Symbol('1'))) === Symbol.prototype

1 + {valueOf(){return 2}} // 3
1 + {toString(){return 3}} // 4
1 + {valueOf(){return 1},toString(){return '2'}} // 2
'1' + {valueOf(){return 1},toString(){return '2'}} // '11'
1 + {[Symbol.toPrimitive](){return 6},valueOf(){return 1},toString(){return '2'}} // 7
1 + {[Symbol.toPrimitive](){return {}},valueOf(){return 1},toString(){return '2'}} // Error
//这种情况是因为[Symbol.toPrimitive]默认调用valueOf和toString，如果改写了，就不会调用valueOf和toString了
