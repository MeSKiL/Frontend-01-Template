lesson-5 语句与声明 对象
Completion Record // 语句完成后的记录
    [[type]]:normal,break,continue,return,throw
    [[value]]:Types // any ECMAScript language value or empty
    [[target]]:label // any ECMAScript string or empty 只有循环语句和switch语句可以消费标签

Statement::
    // 简单语句
    VariableStatement
    EmptyStatement
    ExpressionStatement
    DebuggerStatement
    ThrowStatement
    ContinueStatement
    BreakStatement
    ReturnStatement
    // 复合语句
    BlockStatement
    BreakableStatement
    LabelledStatement
    TryStatement
    IfStatement
    WithStatement

    // 简单语句
    VariableStatement:: // 其他声明都划分在Declaration里，var划分在语句里
        var VariableDeclarationList ;
            VariableDeclarationList::
                VariableDeclaration
                VariableDeclarationList , VariableDeclaration
                VariableDeclaration::
                    BindingIdentifier Initializer
                    BindingPattern Initializer
    // 预处理(BoundNames)会导致变量提升行为,提升变量后赋值为undefined
        var x = 0;
        function foo(){
            var o = {x:1}
            x = 2
            with(o){
                var x = 3 // var 加在 x=3之前，改变了x=2的行为
            }
            console.log(x) // 2
        }
        foo()
        console.log(x) // 0

        var x = 0;
        function foo(){
            var o = {x:1}
            x = 2
            with(o){
                x = 3
            }
            console.log(x) // 2
        }
        foo()
        console.log(x) // 2
    EmptyStatement::
        ; // ;
    ExpressionStatement::
        // 不以 {、function、async function、class、let、[、}、开头的表达式
        [lookahead ∉ { { , function , async [no LineTerminator here] function , class , let [ }]
        Expression[+In, ?Yield, ?Await] ; // a = 1 + 2;
    DebuggerStatement::
        debugger ; // debugger;
    ThrowStatement::
        throw [no LineTerminator here] Expression; // throw a;
    ContinueStatement::
        continue ; // continue;
        continue [no LineTerminator here] LabelIdentifier ; // continue label1;
    BreakStatement::
        break ; // break;
        break [no LineTerminator here] LabelIdentifier ; // break label2;
    ReturnStatement::
        return ; // return;
        return [no LineTerminator here] Expression ; // return a;

    // 复杂语句
    BlockStatement::
        // [[type]]::normal
        // [[value]]::--
        // [[target]]::--
        // 其中有语句产生非normal的结果，会终止block的执行
        Block
        Block::
            { StatementList }
            // {a:1} a会被理解成label,而不是对象
            StatementList::
                StatementListItem
                StatementList StatementListItem
                StatementListItem::
                    Statement
                    Declaration

    BreakableStatement::
        IterationStatement
        SwitchStatement

        IterationStatement::
            // 如果Completion Record带有target，会根据label去消费
            do Statement while ( Expression ) ;
            // do {} while ()

            while ( Expression ) Statement
            // while () {} 如果while里面是continue或者break，就会消费掉

            for ( [lookahead ∉ { let [ }] Expression ; Expression ; Expression ) Statement
            // for( a ; a < 10 ; a++) {}

            for ( var VariableDeclarationList ; Expression ; Expression) Statement
            // for (var a = 1 ; a < 10 ; a++) {}

            for ( LexicalDeclaration Expression ; Expression; Expression ) Statement
            // const 和 let会独立产生作用域 是循环block父级作用域
            // for (let i = 0 ; i < 10 ;i++){let i = 0;console.log(i)}

            for ( [lookahead ∉ { let [ }] LeftHandSideExpression in Expression ) Statement
            for ( var ForBinding in Expression ) Statement
            for ( ForDeclaration in Expression ) Statement
            // for(let p in {a:1,b:2}){}
            // 与 带 in的表达式有冲突
            // let a = [1,2,3];1 in a;for(let i in a){};

            for ( [lookahead ≠ let] LeftHandSideExpression of AssignmentExpression ) Statement
            for ( var ForBinding of AssignmentExpression ) Statement
            for ( ForDeclaration of AssignmentExpression ) Statement
            // for(let p of 可迭代对象){}
            // 经常配合 *

            for await ( [lookahead ≠ let] LeftHandSideExpression of AssignmentExpression ) Statement
            for await ( var ForBinding of AssignmentExpression ) Statement
            for await ( ForDeclaration of AssignmentExpression) Statement

            ForDeclaration::
                LetOrConst ForBinding

                ForBinding::
                    BindingIdentifier
                    BindingPattern

                    BindingIdentifier::
                        Identifier
                        yield
                        await

        SwitchStatement::
            switch ( Expression ) CaseBlock

            CaseBlock::
                { CaseClauses }
                { CaseClauses DefaultClause CaseClauses }

                CaseClause::
                    CaseClause
                    CaseClauses CaseClause

                    CaseClause::
                        case Expression : StatementList

                    DefaultClause::
                        default : StatementList

    LabelledStatement::
        LabelIdentifier : LabelledItem

        LabelledItem::
            Statement
            FunctionDeclaration

    TryStatement::
        try Block Catch
        try Block Finally
        try Block Catch Finally

        Block::
            // 不是blockStatement但是行为差不多
            { StatementList }
        Catch::
            // catch和for不一样，不会生成父作用域,在子作用域里声明 CatchParameter
            // catch(e){let e} 不行,因为catch的行为
            catch ( CatchParameter ) Block
            catch Block

            CatchParameter::
                BindingIdentifier
                BindingPattern

        Finally::
            finally Block

    IfStatement::
        if ( Expression ) Statement else Statement
        if ( Expression ) Statement

    WithStatement::
        with ( Expression ) Statement

Declaration::
    HoistableDeclaration
    ClassDeclaration
    LexicalDeclaration

    HoistableDeclaration::
    // 与var相同，会有预处理阶段，与var不同的是，提升的同时会赋值
        FunctionDeclaration
        GeneratorDeclaration
        AsyncFunctionDeclaration
        AsyncGeneratorDeclaration

        FunctionDeclaration::
            function BindingIdentifier ( FormalParameters ) { FunctionBody }
            // function foo() 函数声明
            (default) function ( FormalParameters ) { FunctionBody }
            // default export default function(){}
            FunctionExpression::
                function BindingIdentifier ( FormalParameters ) { FunctionBody }
            FunctionBody::
                FunctionStatementList::
                    StatementList
            FormalParameters::
                [empty]
                FunctionRestParameter
                FormalParameterList
                FormalParameterList ,
                FormalParameterList , FunctionRestParameter

                FunctionRestParameter::
                    BindingRestElement

                    BindingRestElement::
                        ...BindingIdentifier
                        ...BindingPattern
                FormalParameterList::
                    FormalParameter
                    FormalParameterList , FormalParameter
                        FormalParameter::
                            BindingElement
                            BindingElement::
                                SingleNameBinding
                                BindingPattern Initializer
                                SingleNameBinding::
                                    BindingIdentifier Initializer
                                    Initializer::
                                        = AssignmentExpression

        GeneratorDeclaration::
            function * BindingIdentifier ( FormalParameters ) { GeneratorBody }
            (default) function * ( FormalParameters ) { GeneratorBody }
            GeneratorExpression::
                function * BindingIdentifier ( FormalParameters ) { GeneratorBody }
            GeneratorBody::
                FunctionBody

        AsyncFunctionDeclaration::
            async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }
            AsyncFunctionExpression::
                async function ( FormalParameters ) { AsyncFunctionBody }
                async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }
            AsyncFunctionBody::
                FunctionBody
        AsyncGeneratorDeclaration::
            async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }
            (default) function * ( FormalParameters ) { AsyncGeneratorBody }
            AsyncGeneratorExpression::
                async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }
            AsyncGeneratorBody::
                FunctionBody

            function sleep(d){
                return new Promise(resolve => setTimeout(resolve,d))
            }
            async function * foo(){
                let i = 0;
                while(true){
                    yield i++;
                    await sleep(1000)
                }
            }
            void async function(){
               let g = foo();
               console.log(await g.next())
               console.log(await g.next())
               console.log(await g.next())
               console.log(await g.next())
               console.log(await g.next())
            }()

            void async function(){
                let g= foo();
                for await (let e of g){
                    console.log(e)
                }
            }

    ClassDeclaration::
        class BindingIdentifier ClassTail
        class ClassTail
            ClassExpression::
                class BindingIdentifier ClassTail

            ClassTail::
                ClassHeritage { ClassBody }
                ClassHeritage::
                    extends LeftHandSideExpression
                ClassBody::
                    ClassElementList
                    ClassElementList::
                        ClassElement
                        ClassElementList ClassElement
                        ClassElement::
                            MethodDefinition
                            static MethodDefinition
                            ;
                            MethodDefinition::
                                PropertyName ( UniqueFormalParameters ) { FunctionBody }
                                GeneratorMethod
                                AsyncMethod
                                AsyncGeneratorMethod
                                get PropertyName ( ) { FunctionBody }
                                set PropertyName ( PropertySetParameterList ) { FunctionBody }

                                PropertyName::
                                    LiteralPropertyName
                                    ComputedPropertyName
                                    LiteralPropertyName::
                                        IdentifierName
                                        StringLiteral
                                        NumericLiteral
                                    ComputedPropertyName::
                                        [ AssignmentExpression ]
                                UniqueFormalParameters::
                                    FormalParameters
                                PropertySetParameterList::
                                    FormalParameter
            class Test extends String {
                1(){
                    console.log(1)
                }
                static 2(){
                    console.log(2)
                }
                async test(){}
            }
            const test = new Test()
            test[1]() // 1
            Test[2]() // 2
    LexicalDeclaration::
        LetOrConst BindingList ;
        BindingList::
            LexicalBinding
            BindingList , LexicalBinding
            LexicalBinding::
                BindingIdentifier Initializer
                BindingPattern Initializer

